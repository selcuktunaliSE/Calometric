generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  passwordHash  String
  createdAt     DateTime       @default(now())
  profile       Profile?
  goals         Goal[]
  foodLogs      FoodLog[]
  refreshTokens RefreshToken[]
}

model Profile {
  userId        String    @id
  user          User      @relation(fields: [userId], references: [id])
  name          String?
  gender        String?
  birthdate     DateTime?
  heightCm      Int?
  weightKg      Float?
  activityLevel String?
}

model Goal {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  dailyCalorie Int
  carbPct      Int
  proteinPct   Int
  fatPct       Int
  startDate    DateTime @default(now())
  isActive     Boolean  @default(true)
}

model FoodItem {
  id        String    @id @default(cuid())
  name      String
  brand     String?
  upc       String?   @unique
  perUnit   String
  kcal      Int
  carbG     Float
  proteinG  Float
  fatG      Float
  source    String
  createdAt DateTime  @default(now())
  servings  Serving[]
  FoodLog   FoodLog[]
}

model Serving {
  id     String   @id @default(cuid())
  foodId String
  food   FoodItem @relation(fields: [foodId], references: [id])
  label  String
  grams  Float
}

model FoodLog {
  id       String   @id @default(cuid())
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  foodId   String
  food     FoodItem @relation(fields: [foodId], references: [id])
  loggedAt DateTime @default(now())
  mealType String // 'breakfast' | 'lunch' | 'dinner' | 'snack'
  amount   Float
  unit     String // 'g' | 'serving'
  grams    Float
  kcal     Int
  carbG    Float
  proteinG Float
  fatG     Float
}

model RefreshToken {
  id        String    @id @default(cuid())
  tokenHash String    @unique
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  expiresAt DateTime
  revokedAt DateTime?
}
